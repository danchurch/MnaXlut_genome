## so here we'll muck around with bowtie, see if we can get the F2 hybrid reads 
## talking to the luteus genome:

genome='/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.faa'

## shortcut to instructions/scripts from Josh
cd /Users/danthomas/Documents/naiandinus_gen/for_dan/Call_SNPs

bowtie2 -I 150 -X 2000 --local --very-sensitive-local -x $genome -1 $i -2 $file2 

## huh, looks like josh had R2 reads.. where are these?

## looks like I will not know until Josh gets back to us. In the 
## meantime, maybe we can run through a tutorial on the bowtie2 process...

## we'll put the whole bowtie2 directory nearby and work in it, cuz they
## have all the reads and genomes in it...

## let's follow the manual tutorial for bowtie2:

## http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#getting-started-with-bowtie-2-lambda-phage-example

BT2_HOME=/Users/danthomas/Documents/naiandinus_gen/bowtie2-2.3.4.1-macos-x86_64

## now we make an index file:

mkdir tutorial
cd tutorial
mkdir lambda_ind
cd lambda_ind

$BT2_HOME/bowtie2-build $BT2_HOME/example/reference/lambda_virus.fa lambda_virus

## this makes a set of indices from the reference genome. 
## after this, you don't need the originial reference fasta

## now align some reads:

$BT2_HOME/bowtie2 -x lambda_ind -U $BT2_HOME/example/reads/reads_1.fq -S eg1.sam



## side note, install SAMtools: ##

cd samtools.1.8  

./configure --prefix=/usr/local/bin

make

make install

######### Samtools: ###########

samtools view -bS eg1.sam > eg1.bam

## and other cool stuff. Try this with our genome?

#################################



## josh's script:

cd /Volumes/Ron/VCF
mkdir ./BAM
genome=/Volumes/Ron/VCF/Reference/LF10T
flag=Flag_Z002_$1.log

for i in /Volumes/Ron/VCF/fastq/$1/*R1*.fastq; do
    file2="${i/R1/R2}"
    output="${i/.fastq/.bam}"
    output=${output##*/}
    [ -e "$i" ] && bowtie2 -I 150 -X 2000 --local --very-sensitive-local -x $genome -1 $i -2 $file2 | samtools view -bS - > ./BAM/$output || echo "There was a problem with Z002 for $1" >> $flag
done

echo "Bowtie2 for $1 done: " $(date) >> $flag


## looks like he had both R1 and R2 reads. How come ours are all labeled R1?


## looks like josh did in fact merge paired ends. I can't reconstruct, I don't seem 
## to have the R2s

## but why are all of the reads lumped into one large merged file?

## and what are these fastqs? Different colors of F2 offspring? 

## does that mean we need to demultiplex?

## lets look:

cool='/Users/danthomas/Documents/naiandinus_gen/for_dan/Cooley_3315_160429B1'

cd $cool

fr i in *fastq; do echo $(head -n 1 $i) $i; done

## okay, talked to Josh - there are no reverse reads, josh included some 
## extra scripts in the files...

########## plot read quality of one of the fastq files: #############

## can we get a good look at the read quality:


for i in $fpath*"fastq"
do
echo $i
$ftd"fastx_quality_stats" -Q33 -i $i -o $i"-Stats.txt"
echo $i done!
done

## while we're at it, get fastx tools into path

cd /usr/local/Cellar/fastxtools/

cd /usr/local/bin

for i in /usr/local/Cellar/fastxtools/*; do
    ln -s $i /usr/local/bin$(basename $i)
done

## next time should be easier

## what do these look like?

fpath='/Users/danthomas/Documents/naiandinus_gen/for_dan/Cooley_3315_160429B1/'

fastq_quality_boxplot_graph.sh -h

for i in $fpath*Stats.txt; do
echo $i
#fastq_quality_boxplot_graph.sh -i $i -o $i"quality.eps" -p
echo $i"quality.eps"
done

## huh, not sure if I did that right, cuz they all look the same...

## but they are all high quality, if they are right. Something is fishy, don't 
## think I can trust these stats, because they are totally uniform, no variation 
## in the qscores of the millions of reads? weird. Maybe this is normal for 
## genomic work?



## oh well, let's try an alignment:

######### as per josh

cd /Volumes/Ron/VCF
mkdir ./BAM
genome=/Volumes/Ron/VCF/Reference/LF10T
flag=Flag_Z002_$1.log

for i in /Volumes/Ron/VCF/fastq/$1/*R1*.fastq; do
    file2="${i/R1/R2}"
    output="${i/.fastq/.bam}"
    output=${output##*/}
    [ -e "$i" ] && bowtie2 -I 150 -X 2000 --local --very-sensitive-local -x $genome -1 $i -2 $file2 | samtools view -bS - > ./BAM/$output || echo "There was a problem with Z002 for $1" >> $flag
done

##########


## first make indices from our scaffolds of the 

bowtie2-build -f /Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.faa Mlu

## so for one file:
i=/Users/danthomas/Documents/naiandinus_gen/for_dan/Cooley_3315_160429B1/JP-S1_S16_L002_R1_001.fastq
j=$(basename $i)
k=${j/fastq/sam}
bowtie2 --local  -x Mlu -U $i -S /Users/danthomas/Documents/naiandinus_gen/SAM/$k 

## a script to run these alignments:

## aligns.sh
############################
#!/usr/bin/env bash

## path to our fastqs
fpath='/Users/danthomas/Documents/naiandinus_gen/for_dan/Cooley_3315_160429B1/'

touch error_log_13.04.2018.txt

cd /Users/danthomas/Documents/naiandinus_gen/Luteus_genome

for i in $fpath*001.fastq; do
	j=$(basename $i)
	k=${j/fastq/sam}
	echo $i >> error_log_13.04.2018.txt
	bowtie2 --local  -x Mlu -U $i -S /Users/danthomas/Documents/naiandinus_gen/SAM/$k \
	&& echo $k done >> error_log_13.04.2018.txt || echo $k fucked up somehow >> error_log_13.04.2018.txt
done

############################

## run it:

chmod 777 aligns.sh

time ./aligns.sh 

touch error_log.txt
for i in $fpath*001.fastq; do
	j=$(basename $i)
	k=${j/fastq/sam}
	echo $i >> error_log.txt
	echo $k done >> error_log.txt || echo $k fucked up somehow >> error_log.txt
done


#### okay, chewing away on that. 

## now done. times:

## real    565m3.770s
## user    554m22.225s
## sys     4m27.857s

## stout:

## 56034871 reads; of these:
##   56034871 (100.00%) were unpaired; of these:
##     7893494 (14.09%) aligned 0 times
##     11729089 (20.93%) aligned exactly 1 time
##     36412288 (64.98%) aligned >1 times
## 85.91% overall alignment rate
## 68049510 reads; of these:
##   68049510 (100.00%) were unpaired; of these:
##     7592098 (11.16%) aligned 0 times
##     14879687 (21.87%) aligned exactly 1 time
##     45577725 (66.98%) aligned >1 times
## 88.84% overall alignment rate
## 60681218 reads; of these:
##   60681218 (100.00%) were unpaired; of these:
##     9222716 (15.20%) aligned 0 times
##     12679236 (20.89%) aligned exactly 1 time
##     38779266 (63.91%) aligned >1 times
## 84.80% overall alignment rate
## 55885597 reads; of these:
##   55885597 (100.00%) were unpaired; of these:
##     7485075 (13.39%) aligned 0 times
##     11651355 (20.85%) aligned exactly 1 time
##     36749167 (65.76%) aligned >1 times
## 86.61% overall alignment rate
## 67627796 reads; of these:
##   67627796 (100.00%) were unpaired; of these:
##     15149703 (22.40%) aligned 0 times
##     13937577 (20.61%) aligned exactly 1 time
##     38540516 (56.99%) aligned >1 times
## 77.60% overall alignment rate
## 66654520 reads; of these:
##   66654520 (100.00%) were unpaired; of these:
##     9078782 (13.62%) aligned 0 times
##     14502639 (21.76%) aligned exactly 1 time
##     43073099 (64.62%) aligned >1 times
## 86.38% overall alignment rate

## what's next?

## convert to BAM:

cd /Users/danthomas/Documents/naiandinus_gen/SAM

for i in *sam; do
	echo $i
	time samtools view $i -bS > ./BAM/${i/sam/bam}
done



samtools view -bS - > ./BAM/$output

## times:

## real    7m14.139s
## user    6m29.074s
## sys     0m11.309s
## JP-S2_S17_L002_R1_001.sam
## 
## real    8m35.081s
## user    7m50.433s
## sys     0m13.315s
## JP-S3_S18_L002_R1_001.sam
## 
## real    7m26.098s
## user    6m53.986s
## sys     0m11.859s
## JP-S4_S19_L002_R1_001.sam
## 
## real    7m1.775s
## user    6m23.774s
## sys     0m10.780s
## JP-S5_S20_L002_R1_001.sam
## 
## real    8m7.840s
## user    7m28.659s
## sys     0m12.666s
## JP-S6_S21_L002_R1_001.sam
## 
## real    8m11.355s
## user    7m36.835s
## sys     0m12.849s

## okay, got the BAMs. Now what?

## Josh did this next:

cd /Volumes/Ron/VCF
flag=Flag_Z004_$1.log

for i in ./BAM/$1*.bam; do
    output="${i/.bam/.FM.bam}"
    [ -e "$i" ] && picard FixMateInformation I=$i O=$output SO=coordinate || echo "There was a problem with Z004 for $1" >> $flag
    rm $i
done

## what is picard? a package of tools for hnadling hi-throughput result files like BAMs
## sounds handy. So what does fixMateInformation do?

## looks like it checks headers of reads to make sure the right
## reads got paired, etc. But we didn't merge paired ends, soo, 
## need this? don't think so...

## gotta sort these BAMs, apparently

## sort by coordinate position in the reference genome:

## sortBAMs.sh
###############

cd /Users/danthomas/Documents/naiandinus_gen/BAM

touch sortBAMs_log.txt 

for i in *
do
    ls $i
    output="sortedBAM/"${i/.bam/.sorted.bam}
    picard SortSam I=$i O=$output SORT_ORDER=coordinate \
    && echo $output finished >> markdupe_log.txt || echo "Something's fucked with "$output >> markdupe_log.txt
done

##################

time ./sortBAMS.sh





## so next josh did this:

less /Users/danthomas/Documents/naiandinus_gen/for_dan/Call_SNPs/readme.txt

## PicardMarkDupes.sh

for i in ./BAM/$1*.FM.bam; do
    output="${i/.FM.bam/.MD.bam}"
    [ -e "$i" ] && picard MarkDuplicates I=$i O=$output M=$output.metrics.txt REMOVE_DUPLICATES=true MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 || echo "There was a problem with Z005 for $1 " >> $flag
##    rm $i
done

## I'm a little unclear on this. I can see why removing duplicates is handy. 
## Dereplicating the redundant information in duplicates makes sense 
## as far as computational expense. But the explanation in picard's manual
## implies that all duplicates are erroroneous reads - how can this be 
## true? Presumably the same digestion site occurs several times, gets 
## sequenced? Maybe the sites of digestion are random, so it is really
## unlikely that a sequence would happen twice. 

## not sure, anyway, just following orders like a good scientist...


## josh's command:

## picard MarkDuplicates I=$i O=$output M=$output.metrics.txt REMOVE_DUPLICATES=true MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 

## the max_file_handles parameter... manual says that this sets a limit on 
## the number of open files for this process, because there is a limit permitted
## by the kernel. Can be found on our comp with:

ulimit -n ## 256 files

## that's a LOT less than the default setting of 8000, and what Josh 
## used (he was on a cluster?). So one of our commands would look like this?


sbam="/Users/danthomas/Documents/naiandinus_gen/BAM/sortedBAM"

ddm="/Users/danthomas/Documents/naiandinus_gen/BAM/dmBAM/"

## try one:


i="JP-S1_S16_L002_R1_001.sorted.bam"
output=${i/.sorted.bam/.MD.bam}
echo $ddm$output

cd $sbam
picard MarkDuplicates I=$i O=$ddm$output M=$output.metrics.txt REMOVE_DUPLICATES=true MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=256 

## seems to work. try looping through:


## markdupes.sh
###############

ddm="/Users/danthomas/Documents/naiandinus_gen/BAM/dmBAM/"

cd /Users/danthomas/Documents/naiandinus_gen/BAM/sortedBAM

touch $ddm"markdupe_log.txt"

for i in *
do
    echo $i
    output=${i/.sorted.bam/.MD.bam}
    echo $output
    picard MarkDuplicates \
        I=$i \
        O=$ddm$output \
        M=$output.metrics.txt \
        REMOVE_DUPLICATES=true \
        MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=256 \
    && echo $output finished >> markdupe_log.txt || echo "Something's fucked with "$output >> markdupe_log.txt
done

##################

#        ASSUME_SORT_ORDER=coordinate \

chmod 777 markdupes.sh

time ./markdupes.sh

at -f markdupes.sh now + 3 hour

## huh, that didn't work at all. 

## need to figure out the at command better. 

## rerun it now



####################


## worked. Now we need to assign read groups? I gather that this 
## marks BAM/SAM files with information from the illumina header

## josh's example is as such:

picard AddOrReplaceReadGroups I=$i O=$output RGPL=illumina RGPU=indexSEQ RGID=90210 RGLB=A_Library RGSM=$1 

## looks like he fills in the rg fields with some metadata and keeps the phenotype binning in the 
## RGSM field (Read Group Sample Name)

## 


## one of our reads has this:

fastqs='/Users/danthomas/Documents/naiandinus_gen/for_dan/Cooley_3315_160429B1/'

head -n 1 $fastqs"JP-S5_S20_L002_R1_001.fastq"

## @K00282:27:HC3GVBBXX:2:1101:1945:998 1:N:0:NAGCTT

## let's look at one of our SAM files, see what the read group info is:

samtools view -H /Users/danthomas/Documents/naiandinus_gen/SAM/JP-S1_S16_L002_R1_001.sam | grep '@RG'
samtools view -H /Users/danthomas/Documents/naiandinus_gen/SAM/JP-S1_S16_L002_R1_001.sam | head

## doesn't exist. I guess that's why we have to add it now. 

## for one of our reads:

cd /Users/danthomas/Documents/naiandinus_gen/BAM/dmBAM
rgBAMs="/Users/danthomas/Documents/naiandinus_gen/BAM/rgBAM/"

for i in *; do
echo $i 
output=$rgBAMs${i/.MD.bam/.RG.bam}
echo $output
done

picard AddOrReplaceReadGroups \
    I=$i \
    O=$output \
    RGPL=illumina \
    RGPU=indexSEQ \ ## GATK site says..?
    RGID=90210 \ ## I think this is the same for all reads from the same lane and run...
    RGLB=A_Library \ ##...?
    RGSM=$1 ## position parameter when he ran the script... what was it? 


## if he assign RGSM to all the BAM files with the same parameter, 
## must not be that important..?

## hell, just try one. Then on to geneious:


cd /Users/danthomas/Documents/naiandinus_gen/BAM/dmBAM

rgBAMs="/Users/danthomas/Documents/naiandinus_gen/BAM/rgBAM/"

i=JP-S1_S16_L002_R1_001.MD.bam
SM=$(echo $i | sed "s/.*_S/S/g" | sed "s/_L.*//g")
output=$rgBAMs${i/.MD.bam/.RG.bam}

picard AddOrReplaceReadGroups  I=$i  O=$output  RGPL=illumina  RGPU=indexSEQ  RGID=27  RGLB=A_Library  RGSM=$SM

    echo $i
    echo $SM
    echo $output

## seems to work, 
## loop it:

## rg.sh
########################################

cd /Users/danthomas/Documents/naiandinus_gen/BAM/dmBAM

rgBAMs="/Users/danthomas/Documents/naiandinus_gen/BAM/rgBAM/"

touch $rgBAMs"rglog.txt"

for i in *; do
    echo $i >> $rgBAMs"rglog.txt"
    SM=$(echo $i | sed "s/.*_S/S/g" | sed "s/_L.*//g")
    output=$rgBAMs${i/.MD.bam/.RG.bam}
    picard AddOrReplaceReadGroups  I=$i  O=$output  RGPL=illumina  RGPU=indexSEQ  RGID=27  RGLB=A_Library  RGSM=$SM
    echo $output >> $rgBAMs"rglog.txt"
done

#################################################

time ./rg.sh

## real    16m58.738s
## user    16m4.972s
## sys     0m14.424s


## executed okay. We'll see downstream if the labels for the reading group worked.

## what's next?

## looks like Josh merged all of these RG-labeled files into one. 
## used the samtools merge command:

########## Josh script for adding read groups and merge #########
##
## cd /Volumes/Ron/VCF
## flag=Flag_Z006_$1.log
## 
## for i in ./BAM/$1*.MD.bam; do
##     output="${i/.MD.bam/.RG.bam}"
##     #sample=${i##*/}
##     #sample="${sample/.MD.bam/}"
##     [ -e "$i" ] && picard AddOrReplaceReadGroups I=$i O=$output RGPL=illumina RGPU=indexSEQ RGID=90210 RGLB=A_Library RGSM=$1 || echo "There was a problem with Z006 for $1" >> $flag
## done
## rm ./BAM/$1*.MD.bam

#### looks like here he is counting the rg-labeled BAM files of some basename (argument), and storing their names in an array:

## declare -i j=0    
## for i in ./BAM/$1*.RG.bam; do
##     str="$str $i"
##     j=$j+1
## done

#### then he uses the basename of the last $i assigned to make file name for the merged file:
## 
## output="${i/.RG.bam/.Merged.bam}"

## then he checks to to see if there are more than one file. If so, merge them. If not, change the single file name to merged 

## if test $j -gt 1; then
##     echo "There are $j files for $1 - merging"
##     samtools merge $output $str
## else
##     echo "There is $j file for $1 - renaming"
##     mv $str $output
## fi
## 
## outsort="${i/.RG.bam/.Sorted}"
## samtools sort $output $outsort
## 
## ##rm ./BAM/$1*.RG.bam
## ##rm ./BAM/$1*.Merged.bam
## 
## echo "Read groups added and files merged and sorted for $1: " $(date) >> $flag
##
##############################

## so for us, I think this is as simple as:

cd /Users/danthomas/Documents/naiandinus_gen/BAM/rgBAM

for i in *; do 
    ins="$ins $i"
done

samtools merge Mll_x_MN.merged.bam $str

## real    23m43.163s
## user    15m23.801s
## sys     0m14.385s

## worked? the merged file is approximately the sum of the other files...

#####################


## indexing, other prep

## Looks like I need to make a proper reference genome, can't just use the fasta
## as is. How to do this?

genome="/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta"
 
cd /Users/danthomas/Documents/naiandinus_gen/Luteus_genome/

## make dictionary of reference sequences
picard CreateSequenceDictionary REFERENCE=$genome OUTPUT=Mimulus_luteus.dict

## use make a samtools-type index
samtools faidx Mimulus_luteus.fasta

faidx="/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta.fai"

## and... also have to index our bam file?:

cd /Users/danthomas/Documents/naiandinus_gen/BAM/

samtools index /Users/danthomas/Documents/naiandinus_gen/BAM/Mll_x_MN.merged.bam
## I think if I keep this in the same directory as the 
## BAM I am analyzing, I don't need a separate shortcut to it...

## (I changed our genome name from ".fa" to ".fasta". This is going to mess with upstream
## code...oh well, onward)

## the next step needs the GATK tools, which are jar files. 

## but as I understand it, we don't need to call the jar files themselves, there's a wrapper script that 
## linked to our usr/local/bin folder. 

## not sure what ploidy to use here, technically tetraploid but functionally diploid

## Josh's script:

## java -Xmx30g -jar GenomeAnalysisTK.jar -R $genome -T UnifiedGenotyper -rf MaxInsertSize --maxInsertSize 10000 -rf DuplicateRead -rf BadMate -rf BadCigar --min_base_quality_score 25 -rf MappingQuality --min_mapping_quality_score 25 -ploidy 2 --genotype_likelihoods_model BOTH --output_mode EMIT_ALL_SITES --max_alternate_alleles 2 $str -o $out

## Let's try this with ploidy = 2

## the unified genotyper is deprecated, use HaplotypeCaller


## so to map the variants...

## ours might look like:

genome="/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta"
merged="/Users/danthomas/Documents/naiandinus_gen/BAM/Mll_x_MN.merged.bam"
out="/Users/danthomas/Documents/naiandinus_gen/Mll_x_MN.merged.ver0.1.vcf"


GATK HaplotypeCaller \
    -R $genome \
    -I $merged \
    -O $out

    -ERC GVCF \
    -rf MaxInsertSize \
    --maxInsertSize 10000 \
    -ploidy 2 \

## deleted mapping quality filters, because there is some kind of default mapping quality filter 
## in the haplotyper, "HCMappingQualityFilter"


gatk HaplotypeCaller -R

## questions for josh 

## best to merge our different BAMs into one to make this comparison? Does it matter?

## do we need to set this: --max_alternate_alleles 2 $str  

## don't we want the whole genome? as in, some sort of gvcf file? 


picard ValidateSamFile I=$merged MODE=SUMMARY 

## no errors found. Well, shit. What's wrong?


## anyway, this is running:

## I get the following error, endlessly:

"""
Annotation will not be calculated, genotype is not called or alleleLikelihoodMap is null
"""


GATK HaplotypeCaller \
    -R $genome \
    -I $merged \
    -O $out

## seems to have worked ....



################### 

## okay, can we use this VCF to reconstruct a 
## draft M. naiandinus genome? Let's try the 
## FastaAlternateReferenceMaker tool 



## gatk says use like this:
## java -jar GenomeAnalysisTK.jar \
##    -R reference.fasta \
##    -o output.fasta \
##    -L input.intervals \
##    -V input.vcf \
##    [--snpmask mask.vcf]

## so ours?:

reference="/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta"
vcf="/Users/danthomas/Documents/naiandinus_gen/Mll_x_MN.merged.ver0.1.vcf"
output="/Users/danthomas/Documents/naiandinus_gen/altref.fasta"

GATK FastaAlternateReferenceMaker \
-R $reference \
-V $vcf \
-o $output

## but gatk isn't finding that program...hmm... online folks are still using it...

type -a gatk   ## gatk is /usr/local/bin/gatk, which is a symlink to /usr/local/Cellar/gatk-4.0.3.0/gatk

cd /usr/local/Cellar/gatk-4.0.3.0/gatk

##example:
java -jar GenomeAnalysisTK.jar -R ../human_g1k_v37.fasta -T FastaAlternateReferenceMaker

## ours?
java -jar gatk-package-4.0.3.0-local.jar -T FastaAlternateReferenceMaker -R $reference -o $output -V $vcf

## not working. GenomeAnalysisTK.jar - is this different than our gatk-package?


## well, this tool ("FastaAlternateReferenceMaker") isn't in the current, 4.0 version of GATK. 
## let's see if we can get the 3.8 version going...

## okay, the old  3.8 gatk is installed in the cellar. I guess we need to symlink to it, cuz it's 
## not technically a binary, is a file that the java interpreter calls...

ln -s /usr/local/Cellar/GenomeAnalysisTK-3.8/GenomeAnalysisTK.jar GenomeAnalysisTK.jar


## does it work?

reference="/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta"
vcf="/Users/danthomas/Documents/naiandinus_gen/Mll_x_MN.merged.ver0.1.vcf"
output="/Users/danthomas/Documents/naiandinus_gen/Mn_v0.1.fasta"

java -jar GenomeAnalysisTK.jar -T FastaAlternateReferenceMaker -R $reference -o $output -V $vcf 

## compare to our luteus genome:

luteus='/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta'

wc -l Mn_v0.1.fasta
wc -l $luteus

head Mn_v0.1.fasta
head $luteus

tail Mn_v0.1.fasta
tail $luteus

## number of scaffolds the same?

grep ">" Mn_v0.1.fasta | wc -l
grep ">" $luteus | wc -l

## looks like it

## not sure how to sanity check this. 

## can we get some scaffolds of interest?

## I see a couple options. Look at the scaffolds we know in genius, see if they make 
## sense.

## or get a local install of blast going, look for the myb genes in it


########## local blast ###########


## make our database
makeblastdb -in Mn_v0.1.fasta -parse_seqids -dbtype nucl

## while we're at, let's do the Mll genome:

cd /Users/danthomas/Documents/naiandinus_gen/Luteus_genome/
makeblastdb -in Mimulus_luteus.fasta -parse_seqids -dbtype nucl

mll_gen='/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta'

## let's look for our myb5a gene, taken from a sequence in the geneious database that claims to be exon1 of myb5 of the Mll scaffold 1235

exon1myb5="TGGAAAACACACCTGTAGGTGTAAGAAAAGGTGCATGGTCCACAGAAGAAGACGTACTCCTGAGGAAATGCATTGAGAATTTTGGTGAAGGAAAATGGCATCTTGTACCTCTTAGAGCAG"

echo ${#exon1myb5} ## 120 bp

blastn -query <(echo $exon1myb5) -db Mn_v0.1.fasta -outfmt 6 -num_alignments 3 -num_descriptions 3 -out test.txt -task blastn

## the headers for this format: qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore

cat test.txt

## huh, does that mean this exon matches exactly to something on scaffold 1211? 

grep "1211" Mn_v0.1.fasta 
## nope, the naiandinus genome has its own sequence numbers,
## they are labeled with the scaffold that they came from in the original Luteus genome
## in this case, goes to scaffold 1235 of the luteus genome. Makes sense.


grep "731" Mn_v0.1.fasta 
## same here, equivalent to scaffold 749 of Mll 

## so let's see, are these numbers more or less equivalent? So if we extract just this 
## sequence, is it M. naiandinus's version of the mll scaffold 1235?:

grep ">1211" Mn_v0.1.fasta 

grep -n ">1211" Mn_v0.1.fasta ## line 5672165



grep ^">21 " Mn_v0.1.fasta 

## so, how do we pull out these PLA regions for a nice visual in genius?

## start with PLA1:

## the interesting homeologue, which has myb5a, is on the mll scaffold of 1235. 
## how many times is this scaffold referenced in this draft genome?

grep "scaffold_1235" Mn_v0.1.fasta

## just once, on sequence >1211 of our Mna genome:
## >1211 lcl|scaffold_1235:1

mll_gen='/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta'

## can we use blast to pull this sequence out?

head Mn_v0.1.fasta

blastdbcmd -entry 1211 -db Mn_v0.1.fasta | head

blastdbcmd -entry 1211 -db Mn_v0.1.fasta > Mna_scaffold_1235.fasta

## so get scaffold out of the Mll genome for comparison
blastdbcmd -entry scaffold_1235 -db $mll_gen | head

blastdbcmd -entry scaffold_1235 -db $mll_gen > Mll_scaffold_1235.fasta

## are these the same length in both genomes?

wc -l Mna_scaffold_1235.fasta
wc -l Mll_scaffold_1235.fasta

## same length, look at them in geneious?

## aligning now. And for PLA2?

###################### PLA2 ##############################

## repeat for PLA2, which should be on scaffold 26 

grep "scaffold_26:" Mn_v0.1.fasta  ## sequence 21


blastdbcmd -entry 21 -db Mn_v0.1.fasta > Mna_scaffold_26.fasta

blastdbcmd -entry scaffold_26 -db $mll_gen > Mll_scaffold_26.fasta

wc -l Mna_scaffold_26.fasta
wc -l Mll_scaffold_26.fasta

wc -c Mna_scaffold_26.fasta
wc -c Mll_scaffold_26.fasta

##  there's one line difference, why?

head Mna_scaffold_26.fasta
head Mll_scaffold_26.fasta

tail Mna_scaffold_26.fasta
tail Mll_scaffold_26.fasta

## what are we interested in?

## we want to design primers for the scaffold 26, PLA2 region
## and we want the homeologue scaffold 1078 for comparisons

## these are large scaffolds ~840,000 bp, can we home in a little?

## for Mll, the region of interest is between 50,000 bp and 150,000
## but can we assume that we know this on the draft naiandinus genome?

## we can blast our myb genes, see if they are in the same spots:

## but what to blast? We had good luck with exon1. Conserved, but 
## not perfectly...

## coming from the luteus genome:
exon1myb2b="ATGGAGAAAAACAAAGGAGTAGTTGGAGTGAGTTGAGGTGCTTGGACAAAACTGTTGAAGAAATGCGTTCAAACCTATGGAGAAGGAAAGTGGCATCTTGTTCCTCTCAGAACT"

echo ${#exon1myb2b} ## 114 bp

blastn -query <(echo $exon1myb2b) -db Mn_v0.1.fasta -outfmt 6 -num_alignments 3  -task blastn -out blast_myb2bexon1_Mna.txt

## qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore

blastn -query <(echo $exon1myb2b) -db $mll_gen -outfmt 6 -num_alignments 3  -task blastn -out blast_myb2bexon1_Mll.txt

## seq1077 pops up, what is this?

grep ">1077 " Mn_v0.1.fasta 
## this is scaffold 1078, the homeologue to 26. Not exactly the same, but I think that 
## Arielle mentioned this. 

## anyway,  our first blast match for exon 1 of myb2b starts at bp 138,253 of the Mna genome

## and exon 1 of myb2b starts at 138,273 in Mll fits well. 

## the other mybs?

## let's check Myb1a and Myb 3a. These bracket the PLA2 region well. 

exon1myb1a="ATGGAGAAGAATCAAGAAGTAGTATTAGGAGTGAGGAAAGGTGCATGGACAAAAGACGAAGATATCCTTTTACAGAAATGCATCGAAAACTACGGCGAGGGGAAGTGGCATCTTGTCCCTCATAGAGCT"
exon1myb3a="ATGGAGACAAACAAAGGAGTAGTTGGTGTTAGGAGAGGTGCATGGACTAAAGAAGAAGATCAACTGCTGAGGAAATGCGTTCAAACCTATGGAGAAGGAAAGTGGCATCTTGTCCCCCTCAGAACTGG"

blastn -query <(echo $exon1myb1a) -db $mll_gen -outfmt 6 -num_alignments 3  -task blastn -out blast_myb1aexon1_Mll.txt
blastn -query <(echo $exon1myb1a) -db Mn_v0.1.fasta -outfmt 6 -num_alignments 3  -task blastn -out blast_myb1aexon1_Mna.txt

## myb1a starts at 93,276 in Mna? ~the same in Mll. Error in name of geneious sequence? (should be myb1b?)
## but there is a secondary hit, ~90% seq similarity, around BP 56,700 in both Mll and Mna. That's probably it, the real myb1a. 
## as for myb3a:

blastn -query <(echo $exon1myb3a) -db $mll_gen -outfmt 6 -num_alignments 3  -task blastn -out blast_myb3aexon1_Mll.txt
blastn -query <(echo $exon1myb3a) -db Mn_v0.1.fasta -outfmt 6 -num_alignments 3  -task blastn -out blast_myb3aexon1_Mna.txt

clear
cat blast_myb3aexon1_Mll.txt
cat blast_myb3aexon1_Mna.txt

## in both genomes, myb3a is near 147,000. 

## so it all seems to line up. We should be able to grab 50,000 to 150,000 as before

## how do we grab just these subsetted sequences?


###########################################################

## to answer this, back up 

## can we look at the coverage that we have in our naiandinus genome?

## program of interest:
bedtools genomecov

## what is our input genome? the reference genome (Mll) or the final 
## product (Mna)?

## probably the reference genome. But maybe we should try them both...


## bams
example_BAM=/Users/danthomas/Documents/naiandinus_gen/BAM/sortedBAM/JP-S6_S21_L002_R1_001.sorted.bam

mergedBAM=/Users/danthomas/Documents/naiandinus_gen/BAM/Mll_x_MN.merged.bam

## genomes:
Mna_gen=/Users/danthomas/Documents/naiandinus_gen/Mn_v0.1.fasta
Mll_gen=/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta


(bedtools genomecov -ibam $mergedBAM -g Mll_gen > genome_cov_test1.txt &) &

## huh, it demands a genome but then tells me it is going to ignore it since this 
## is a bam file... weird... and a pretty small file size (26 mb, from a 5 gig BAM file?)

## so run again? try it with the -d flag:

bedtools genomecov -ibam $mergedBAM -d > MllxMna_genome_cov_BP.txt 

## looks like there are a couple types of output formats. let's check a few:

(bedtools genomecov -ibam $mergedBAM -bg > genome_cov_test2.txt &) & 

## let that run...

## what does that look like?

head genome_cov_test1.txt


head genome_cov_test2.txt


## hmm, no headers on these. I think the per BP data from
## genome_cov_test1.txt is what we need...

## as best I can understand, it looks like the column names are:

## scaffold, BP#, # of reads covering the BP, length of scaffold, fraction of other BPs with this coverage elsewhere in the genome


## Think so. So what do we do with this? We need a zoomable, scrollable 
## map of PLA regions, homeologous regions, etc to look to know which 
## areas we can have confidence in.

## I think this is a job for d3. get npm (and node) installed ....

## okay we have our choice of the js http-server or python's http.server

## now to make a simple bar graph out of this? Can we extract our regions of interest?

## let's focus on PLA2, which is on scaffold 26. Should be very large, is it?

mkdir vis_cov

cd vis_cov

bedtools genomecov -ibam $mergedBAM -d > MllxMna_genome_cov_BP.txt

## worked, but it's a massive file. How do we view this?

## first, get the scaffolds out of interest:

## for instance, Scaffold 26. Are all bps represented?

grep "scaffold_26 " MllxMna_genome_cov_BP.txt | wc -l

## how to extract this? and then view it?

grep "scaffold_26\b" MllxMna_genome_cov_BP.txt | wc -l 
## 830,797 lines 

## does this match the original scaffold?

wc -m ../Mll_scaffold_26.fasta 
## 841,196

## nope.  huh. why not? Are these ~10,000 bp in the original  luteus genome not in our naiaindinus ?

## let's focus on extracting this scaffold from our massive file:

head MllxMna_genome_cov_BP.txt 

## find a regex that works:

cat <(tail MllxMna_genome_cov_BP.txt) <(head MllxMna_genome_cov_BP.txt) | grep "scaffold_6437\b"
cat <(tail MllxMna_genome_cov_BP.txt) <(head MllxMna_genome_cov_BP.txt) | grep "scaffold_6437\>"


## mac has a really weird word boundry for regex:

## example, this doesn't work:
cat <(tail MllxMna_genome_cov_BP.txt) <(head MllxMna_genome_cov_BP.txt) | sed -n '/scaffold_6437\b/p'

## this does:
cat <(tail MllxMna_genome_cov_BP.txt) <(head MllxMna_genome_cov_BP.txt) | sed -n '/scaffold_6437[[:>:]]/p'

## try it out on our massive coverage map:

sed -n '/scaffold_26[[:>:]]/p' MllxMna_genome_cov_BP.txt > Mna_scaffold_26_coverage.tsv &

## while that's chewing, how do we make a graph from these coverage charts?

head MllxMna_genome_cov_BP.txt 

## start by trying out a barchart of just the first ten bp of our first scaffold:

head MllxMna_genome_cov_BP.txt > data.tsv

## eh, wait on that. For right now, just get Arielle and the lab computer a copy of the
## for scaffolds of interest, and their coverage information.

## we already have the scaffold 1235 and scaffold 26 from Mna. To get the homeologues scaffold 749 and 1078?
## also need the coverage info of 1235

###### scaffold 749 ########

cd /Users/danthomas/Documents/naiandinus_gen

grep "scaffold_749" Mn_v0.1.fasta ## ">731"

## check it
blastdbcmd -entry 731 -db Mn_v0.1.fasta | head ## looks right

## pull it out, save it:
blastdbcmd -entry 731 -db Mn_v0.1.fasta > Mna_scaffold_749.fasta

## coverage map

cd vis_cov

sed -n '/scaffold_749[[:>:]]/p' MllxMna_genome_cov_BP.txt > Mna_scaffold_749_coverage.tsv &

## this file is 185,743 BP long. Seem right?

wc -c /Users/danthomas/Documents/naiandinus_gen/Mna_scaffold_749.fasta

## seems alright, some discrepency there, maybe line breaks?

############ scaffold 1078 #################

cd /Users/danthomas/Documents/naiandinus_gen

grep "scaffold_1078" Mn_v0.1.fasta ## ">1077"

## check it
blastdbcmd -entry 1077 -db Mn_v0.1.fasta | head ## looks right

## pull it out, save it:
blastdbcmd -entry 1077 -db Mn_v0.1.fasta > Mna_scaffold_1078.fasta

## coverage map

cd vis_cov

sed -n '/scaffold_1078[[:>:]]/p' MllxMna_genome_cov_BP.txt > Mna_scaffold_1078_coverage.tsv &

## sanity check

tail Mna_scaffold_1078_coverage.tsv ## 127317 bp. Seem right?

wc -c /Users/danthomas/Documents/naiandinus_gen/Mna_scaffold_1078.fasta
## 128,892 characters... we're in the right ball park...

############

## also need the coverage info of 1235

sed -n '/scaffold_1235[[:>:]]/p' MllxMna_genome_cov_BP.txt > Mna_scaffold_1235_coverage.tsv &

tail Mna_scaffold_1235_coverage.tsv ## 106436 bp. Seem right?

wc -c /Users/danthomas/Documents/naiandinus_gen/Mna_scaffold_1235.fasta
## 107,765 seems okay

##############

## pack em up and send them off. 

## after labwork, start a nice notebook for how I did this so 
## Josh or somebody can review. 

##

################

## and...didn't work. Andreas' sequence data for the myb3a gene in the PLA2 region 
## shows a 3bp deletion and a snp that my genome didn't pick up. Check on this...

## 1 blast Andreas' sequence in the luteus and naiandinus genomes:


mll_gen='/Users/danthomas/Documents/naiandinus_gen/Luteus_genome/Mimulus_luteus.fasta'

Mn_v0.1.fasta 

Mna_myb3a='TCACCTCACAAGTAGTACTGCCACCTGCTACAGATAATGTCGAGTACTGCAATGAAAATCACATGTTCGAAAAGAACCCATCTGATTTCTTATTGTCTGGGCCAATTAACGATCAA'

blastn -query <(echo $Mna_myb3a) -db Mn_v0.1.fasta -outfmt 6 -num_alignments 6  -task blastn -out blast_Andreas_myb3a_Mna.txt
blastn -query <(echo $Mna_myb3a) -db $mll_gen -outfmt 6 -num_alignments 6  -task blastn -out blast_Andreas_myb3a_Mll.txt

blast_headers="qseqid sseqid  pident  length  mismatch    gapopen qstart  qend    sstart  send    evalue  bitscore"

cat <(echo $blast_headers) blast_Andreas_myb3a_Mna.txt blast_Andreas_myb3a_Mll.txt

## blast is finding one mismatch...but in geneious we see more, right?

grep ">21 " Mn_v0.1.fasta

## so, yeah, blast agrees with geneious....
## check the coverage for this area...

head Mna_scaffold_26_coverage.tsv

grep -n 147670 Mna_scaffold_26_coverage.tsv
grep -n 147690 Mna_scaffold_26_coverage.tsv
## line numbers match up, BP number is line number. 

sed -n 147670,147690p scaffold_coverages/Mna_scaffold_26_coverage.tsv 

## coverage looks good, am I certain this is the spot? How to check...

## not sure. Anyway, check the VCF...

vcf="Mll_x_MN.merged.ver0.1.vcf"

head $vcf

clear
grep "#CHROM" $vcf -A 5 -B 10

## so to find our variant of interest? It's scaffold 26, bp 147,678.
## our sanger data says there is a G here, and a T on the mna and mll genomes I have

## in our vcf:

grep scaffold_26\\t147678\\t $vcf  ## nada

grep scaffold_26\\t147[0-9][0-9][0-9]\\t $vcf

## hmm. not finding anything inthe neighborhood....

## let's make sure we're not having some sort of indexing error:

## make a samtools index of our genome:
samtools faidx Mn_v0.1.fasta

## 21 is our scaffol 26:
grep ">21 " Mn_v0.1.fasta 

## so look at this with the numbers we think we need (bp 147,678)

samtools faidx Mn_v0.1.fasta 21:147670-147680 


## no indexing error, the numbers line up. 

## but our scaffolds have different numbers, have to rely on alignments:
mll_gen=/Users/danthomas/Documents/naiandinus_gen/luteus_genome/Mimulus_luteus.fasta
samtools faidx $mll_gen "lcl|scaffold_26":147670-147680

## what about a positive check - can we go from a variant in our vcf and find it 
## in our scaffolds?

clear
grep "#CHROM" $vcf -A 1

## our first variant is at BP 209 of scaffold 32. 

grep "scaffold_32[[:>:]]" Mn_v0.1.fasta ## >1

clear

cat \
<(samtools faidx Mn_v0.1.fasta 1:205-215) \
<(samtools faidx $mll_gen "lcl|scaffold_32":205-215)

## what is our coverage for this site?


cov=/Users/danthomas/Documents/naiandinus_gen/vis_cov/MllxMna_genome_cov_BP.txt
scaf26cov=/Users/danthomas/Documents/naiandinus_gen/scaffold_coverages/Mna_scaffold_26_coverage.tsv

grep scaffold_32\\t200\\t $cov -A 20

grep scaffold_26\\t147678\t $scaf26cov -A 10 -B 10

grep scaffold_26\\t147678 $scaf26cov -A 10 -B 10

head $scaf26cov



#############

## so I'm pretty convinced the issue is (1) how picky the haplotyper tool is, 
## and (2) our low read numbers...

## can't do anything about the second, but maybe we can get the haplotyper to 
## relax a bit?


